---
- name: Gather facts
  setup:

- name: Register variables
  include_tasks: register_variables.yml

- name: Create the tempest directory
  file:
    path: "{{ tempest_dir }}"
    mode: 0777
    state: directory

- name: Check OSP version
  include_role:
    name: roles/discover_osp_version

- name: Prepare containerized tempest
  include_tasks: prep_container_tempest.yml
  when: containerized|bool

- name: Prepare git based tempest
  include_tasks: prep_git_tempest.yml
  when: not containerized|bool

- name: Get the external network id
  vars:
    ansible_python_interpreter: "{{ venv_path }}/bin/python"
  openstack.cloud.networks_info:
    cloud: "{{ cloud_name }}"
    validate_certs: "{{ validate_certs| default (omit) }}"
    filters:
      router:external: true
  register: tempest_net_id
  when: external_net_id

- name: Download the test os image
  get_url:
    url: "{{ images[0].url }}"
    dest: "{{ tempest_dir }}/{{ images[0].url | basename }}"
    timeout: 100
    validate_certs: "{{ os_image_cert_validation }}"
  when: image_for_tempest| bool

- name: Check for the specific flavor id if it's required
  vars:
    ansible_python_interpreter: "{{ venv_path }}/bin/python"
  openstack.cloud.compute_flavor_info:
    cloud: "{{ cloud_name }}"
    validate_certs: "{{ validate_certs | default (omit) }}"
    name: "{{ tempest_flavor_name }}"
  register: tempest_flavor_result
  when: tempest_flavor_name is defined

- name: Copying generic config file to the "{{ tempest_dir }}" directory
  copy:
    src: "{{ tempest_config }}"
    dest: "{{ tempest_dir }}"
    owner: "{{ tempest_user }}"
    group: "{{ tempest_user }}"
    mode: 0755
  when: tempest_config is defined

- name: Copying deployer input file to "{{ tempest_dir }}" directory
  vars:
    remote_source: "{{ (deployer_input_config != 'default') | ternary('no','yes') }}"
    copy_file: "{{ (deployer_input_config != 'default') | ternary(deployer_input_config,
                   [tempest_dir, '/', nfv_tempest_plugin, '/docs/tempest-deployer-input.conf.sample']|join('')
                 ) }}"
  copy:
    remote_src: "{{ remote_source }}"
    src: "{{ copy_file }}"
    dest: "{{ tempest_dir }}"
    owner: "{{ tempest_user }}"
    group: "{{ tempest_user }}"
    mode: 0755
  when: deployer_input_config is defined
  register: copy_output

- name: Copying tests include list file
  copy:
    src: "{{ tests_include_list }}"
    dest: "{{ tempest_dir }}"
    owner: "{{ tempest_user }}"
    group: "{{ tempest_user }}"
    mode: 0644
  when: tests_include_list | default('')

- name: Generate accounts.yaml file
  template:
    src: accounts.yaml.j2
    dest: "{{ accounts_file_path }}"
    mode: '0664'
  when: generate_accounts

- name: Check if extra tempest.conf variables supplied
  block:
    - name: Parse extra tempest.conf variables
      set_fact:
        tempest_options_parser: "{{ tempest_extra_vars.split(',') }}"

    - name: Populate extra variables array
      set_fact:
        tempest_options: "{{ tempest_options | default([]) }} + ['{{ item.replace('=',' ') }}']"
      loop: "{{ tempest_options_parser }}"
  when: tempest_extra_vars is defined

- name: verify tempest_results.subunit doesn't exists
  file:
    path: "{{ tempest_dir }}/tempest_results.subunit"
    state: absent

- name: Config and exec containerized tempest
  include_tasks: config_exec_container_tempest.yml
  when: containerized|bool

- name: Config and exec git tempest
  include_tasks: config_exec_git_tempest.yml
  when: not containerized|bool

- name: Ensure '{{ tempest_dir }}/tempest.xml' is absent before logging results
  file:
    path: "{{ tempest_dir }}/tempest.xml"
    state: absent

  # This task returns STDERR but we're still proceeding with it...
  # We should consider refactoring this logic.
- name: Generate results report in a JunitXML format # noqa risky-shell-pipe
  tags: run_tempest_test
  shell: |
    {% if not containerized|bool %}
      source {{ tempest_dir }}/venv/bin/activate
    {% endif %}
    {% if overcloud_version | int >= 15 %}
      subunit2junitxml < {{ tempest_dir }}/tempest_results.subunit \
      >> {{ tempest_dir }}/tempest.xml | subunit2pyunit
    {% else %}
      subunit2junitxml --output-to={{ tempest_dir }}/tempest.xml \
      < {{ tempest_dir }}/tempest_results.subunit | subunit2pyunit
    {% endif %}
  args:
    executable: /bin/bash
    chdir: ""

- name: Set the name for the testsuite
  tags: run_tempest_test
  replace:
    path: "{{ tempest_dir }}/tempest.xml"
    regexp: '^(<testsuite.*name=")'
    replace: '\1nfv'
    mode: '0664'

- name: Generate statistics of executed tests
  tags: run_tempest_test
  shell: |
    {% if not containerized|bool %}
      source {{ tempest_dir }}/venv/bin/activate
    {% endif %}
      subunit-stats --no-passthrough {{ tempest_dir }}/tempest_results.subunit
  args:
    executable: /bin/bash
  register: tests_stats
  failed_when: "tests_stats.rc == 2"

- name: Check existence of tempest log
  tags: run_tempest_test
  stat:
    path: "{%- if containerized|bool -%}
            {{ tempest_dir }}/{{ tempest_main }}/tempest.log
           {%- elif not containerized|bool -%}
            {{ tempest_dir }}/tempest.log
           {%- endif -%}"
  register: tempest_log

- name: Copy tempest log file to the main tempest directory
  tags: run_tempest_test
  copy:
    remote_src: yes
    src: "{{ tempest_dir }}/{{ tempest_main }}/tempest.log"
    dest: "{{ tempest_dir }}/tempest.log"
    mode: '0664'
  when:
    - not tempest_log.stat.exists
    - not containerized|bool

- name: Print the output results of the tempest tests
  tags: run_tempest_test
  vars:
    msg: |
      Tests statistics:

      {{ tests_stats.stdout }}

      For the details, look at the:
      {{ tempest_dir }}/tempest.xml
      {{ tempest_dir }}/tempest.log
  debug:
    msg: "{{ msg.split('\n') }}"
