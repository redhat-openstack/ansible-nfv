---

- name: Check the existance of rc file
  tags: test
  stat:
    path: "{{ item }}"
  with_items:
    - "{{ ospd_rc_file }}"
    - "{{ packstack_rc_file }}"
  register: ospd_rc_file_locate

- name: Set OSPD rc file to use
  tags: test
  set_fact:
    rc_file: "{{ ospd_rc_file }}"
  when: ospd_rc_file_locate.results[0].stat.exists == True

- name: Set Packstack rc file to use
  tags: test
  set_fact:
    rc_file: "{{ packstack_rc_file }}"
  when: ospd_rc_file_locate.results[1].stat.exists == True

- name: Register Auth URL
  tags: test
  shell: "cat {{ rc_file }} | grep AUTH | cut -d '=' -f 2"
  register: osp_auth

- name: Register Username
  tags: test
  shell: "cat {{ rc_file }} | grep USERNAME | cut -d '=' -f 2"
  register: osp_username

- name: Register Tenant name
  tags: test
  shell: "cat {{ rc_file }} | grep TENANT | cut -d '=' -f 2"
  register: osp_tenant

- name: Register Password
  tags: test
  shell: "cat {{ rc_file }} | grep OS_PASSWORD | cut -d '=' -f 2"
  register: osp_password

- name: Install packages and dependency
  tags: test
  become: True
  yum:
    name: "{{ item }}"
    state: 'installed'
  with_items:
    - 'git'
    - 'wget'
    - 'python-devel'
    - 'gcc'
    - 'libffi-devel'
    - 'libxml2-devel'
    - 'libxslt-devel'
    - 'mariadb-devel'
    - 'openssl-devel'
    - 'python-virtualenv'
    - '@Development tools'

- name: Git clone Tempest & Tempest-NFV-plugin
  git:
    repo: "{{ item.url }}"
    dest: "{{ item.dest }}"
    clone: yes
    update: yes
  with_items:
    - { url: '{{ tempest_url }}', dest: "{{ tempest_dir }}/tempest" }
    - { url: '{{ nfv_plugin_url }}', dest: "{{ tempest_dir }}/tempest-nfv-plugin" }

- name: Check if tempest.conf exists
  stat:
    path: '{{ tempest_dir }}/tempest/.venv/'
  register: venv

- name: Run install_venv.py script
  command: 'python {{ tempest_dir }}/tempest/tools/install_venv.py'
  args:
    chdir: '{{ tempest_dir }}/tempest'
  when: venv.stat.exists == False

- name: Install Tempest_plugin in our Virtual env
  pip:
    name: '{{ tempest_dir }}/tempest-nfv-plugin/tempest_plugin/'
    virtualenv: '{{ tempest_dir }}/tempest/.venv'
    extra_args: -e
  when: venv.stat.exists == False

- name: Copy requirments file
  copy:
    src: pip_ansible_openstack_packages.txt
    dest: '{{ tempest_dir }}'

- name: Install requirments for ansible
  pip:
    name: '{{ tempest_dir }}/pip_ansible_openstack_packages.txt'
    virtualenv: '{{ tempest_dir }}/tempest/.venv'
    extra_args: -r

- name: Creating Openstack env folder
  file:
    path: /etc/openstack
    state: directory
    mode: 0755

- name: Create the clouds.yml file for future tasks
  template:
    src: "clouds.yml.j2"
    dest: "/etc/openstack/clouds.yml"
    mode: 0755

- name: Get network-id
  tags: test
  vars:
    ansible_python_interpreter: "/root/tempest/.venv/bin/python"
  os_networks_facts:
    cloud: openstack
    name:  external

- name: debug
  debug:
    var: openstack_networks

- name: Generate tempest.conf file
  stat:
    path: '{{ tempest_dir }}/tempest/etc/tempest.conf'
  register: tempest_conf

- name: Run config_tempest script
  vars:
    ansible_python_interpreter: "/root/tempest/.venv/bin/python"
  shell: '{{ tempest_dir }}/tempest/.venv/bin/python {{ tempest_dir }}/tempest/tools/config_tempest.py --create --debug --image {{ osp_image }} identity.uri {{ osp_auth.stdout }} identity.admin_password {{ osp_password.stdout }}  --network-id {{ openstack_networks.results[0].subnet.network_id }}'
  args:
    chdir: '{{ tempest_dir }}/tempest'

- name: Create flavor
  tags: test
  vars:
    ansible_python_interpreter: "/root/.venv/bin/python"
  os_nova_flavor:
    cloud: openstack
    state: present
    name: m1.nfv-flavor
    ram: 4096
    vcpus: 4
    disk: 20
  register: flavor_id

- name: Set flavor's keys
  tags: test
  shell: 'source "{{rc_file}}"; openstack flavor set --property hw:mem_page_size=1GB --property hw:numa_mempolicy=preferred --property hw:numa_mem.0=4096 --property hw:numa_nodes=1 --property hw:numa_cpus.0=0,1,2,3 --property hw:cpu_policy=dedicated m1.nfv-flavor'

#- name: Changing the image_ssh_user value in tempest.conf
#  lineinfile:
#    dest: '{{ tempest_dir }}/tempest/etc/tempest.conf'
#    regexp: "^image_ssh_user"
#    line: "image_ssh_user = {{ image_ssh_user }}"
#  when: image_ssh_user is defined
#
#- name: Modify the flavor in tempest.conf
#  ini_file:
#    dest: '{{ tempest_dir }}/tempest/etc/tempest.conf'
#    section: compute
#    option: flavor_ref
#    value: "{{ flavor_id.id }}"
#
#- name: Adding port_vnic_type variable
#  ini_file:
#    dest: '{{ tempest_dir }}/tempest/etc/tempest.conf'
#    section: network
#    option: port_vnic_type
#    value: direct
#  when: 'port_vnic_type|bool == true'
#
#- name: Add private-key to hypervisor section in tempest.conf
#  ini_file:
#    dest: '{{ tempest_dir }}/tempest/etc/tempest.conf'
#    section: hypervisor
#    option: private_key_file
#    value: "{{ private_key_dest }}"
#    
#- name: Add username to hypervisor section in tempest.conf
#  ini_file:
#    dest: '{{ tempest_dir }}/tempest/etc/tempest.conf'
#    section: hypervisor
#    option: user
#    value: "{{ user_for_overcloud_nodes }}"

- name: Modify tempest.conf
  tags: test
  ini_file:
    dest: '{{ tempest_dir }}/tempest/etc/tempest.conf'
    section: "{{ item.sect }}"
    option: "{{ item.opt }}"
    value: "{{ item.val }}"
  with_items:
    - { sect: 'network' ,opt: 'port_vnic_type' ,val: "{{ port_vnic_type |default('<None>')}}" }
    - { sect: 'compute' ,opt: 'image_ssh_user' ,val: "{{ image_ssh_user }}" }
    - { sect: 'compute' ,opt: 'flavor_ref' ,val: "{{ flavor_id.id }}" }
    - { sect: 'hypervisor' ,opt: 'private_key_file' ,val: "{{ private_key_dest }}" }
    - { sect: 'hypervisor' ,opt: 'user' ,val: "{{ user_for_overcloud_nodes }}" }

- name: Run TestServerBasicOps Test
  shell: >
    source "{{rc_file}}";
    source /root/tempest/.venv/bin/activate;
    cd /root/tempest;
    /usr/bin/bash /root/tempest/tools/run-tests.sh {{ item }} >> /root/tempest/tempest-output.txt
  with_items: "{{ tempest_tests }}"
