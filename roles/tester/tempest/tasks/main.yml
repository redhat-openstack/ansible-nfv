---

- name: Check for the v3 overcloudrc file
  stat:
    path: "{{ rc_file }}.v3"
  register: rc_file_path

- name: Register Auth URL
  vars:
    rc_v3: "{{ rc_file }}.v3"
    rc_v2: "{{ rc_file }}"
    rc_version_file_path: "{{ rc_file_path.stat.exists | ternary(rc_v3, rc_v2) }}"
  shell: "cat {{ rc_version_file_path }} | grep AUTH_URL | cut -d '=' -f 2"
  register: osp_auth

- name: Register Password
  vars:
    rc_v3: "{{ rc_file }}.v3"
    rc_v2: "{{ rc_file }}"
    rc_version_file_path: "{{ rc_file_path.stat.exists | ternary(rc_v3, rc_v2) }}"
  shell: "cat {{ rc_version_file_path }} | grep OS_PASSWORD | cut -d '=' -f 2"
  register: osp_password

- name: Check OSP version
  include_role:
    name: discover_osp_version

- name: Create the tempest directory
  file:
    path: "{{ tempest_dir }}"
    mode: 0755
    state: directory

- name: Git clone tempest and plugin repositories
  git:
    repo: "{{ item.url }}"
    dest: "{{ tempest_dir }}/{{ item.name }}"
    version: "{{ item.version.get(overcloud_version | int, item.version['defaults']).branch }}"
    clone: yes
    update: yes
    force: yes
  with_items: "{{ tempest_repos }}"

- set_fact:
    tempest_venv: "{{ tempest_dir }}/venv"

- name: Create a virtual environment and upgrade it to the latest version
  pip:
    name: "{{ item }}"
    virtualenv: "{{ tempest_venv }}"
    state: latest
  with_items:
    - 'pip'
    - 'setuptools'
    - 'stestr'
    - 'python-subunit'
    - 'ipdb'
    - 'junitxml'

- name: Install repo requirements
  pip:
    virtualenv: "{{ tempest_venv }}"
    chdir: '{{ tempest_dir }}/{{ item[0] }}'
    requirements: "{{ item[1] }}"
  with_nested:
    - [ "{{ tempest_conf }}", "{{ tempest_main }}" ]
    - [ 'test-requirements.txt', 'requirements.txt' ]

- name: Install tempest-nfv-plugin and openstack-tempest repos in a virtual environment
  pip:
    virtualenv: "{{ tempest_venv }}"
    name: "{{ tempest_dir }}/{{ item }}"
    state: present
    editable: true
  with_items:
    - "{{ neutron_tempest_plugin }}"
    - "{{ nfv_tempest_plugin }}"
    - "{{ tempest_main }}"

- name: Get the external network id
  vars:
    ansible_python_interpreter: "/tmp/ansible_venv/bin/python"
  os_networks_facts:
    cloud: overcloud
    filters:
      router:external: true
  register: tempest_net_id

- name: Download the test os image
  get_url:
    url: "{{ images[0].url }}"
    dest: "/tmp/{{ images[0].url | basename }}"
    timeout: 100

- name: Check if tempestconf tool installed
  stat:
    path: /usr/bin/discover-tempest-config
  register: tempest_conf_tool

- name: Define tempestconf tool if exists
  set_fact:
    config_command: /usr/bin/discover-tempest-config
  when: tempest_conf_tool.stat.exists

- name: Check for the spesific flavor id if it's required
  vars:
    ansible_python_interpreter: "/tmp/ansible_venv/bin/python"
  os_flavor_facts:
    cloud: overcloud
    name: "{{ tempest_flavor_name }}"
  when: tempest_flavor_name is defined

- name: Copying generic config file to the "{{ tempest_dir }}" directory
  copy:
    src: "{{ tempest_config }}"
    dest: "{{ tempest_dir }}"
    owner: "{{ tempest_user }}"
    group: "{{ tempest_user }}"
    mode: 0755
  when: tempest_config is defined

- name: Check if extra tempest.conf variables supplied
  block:
    - name: Parse extra tempest.conf variables
      set_fact:
        tempest_options_parser: "{{ tempest_extra_vars.split(',') }}"

    - name: Populate extra variables array
      set_fact:
        tempest_options: "{{ tempest_options | default([]) }} + ['{{ item.replace('=',' ') }}']"
      with_items: "{{ tempest_options_parser }}"
  when: tempest_extra_vars is defined

- name: tempest.conf file creation
  shell: |
    source "{{ rc_file | default('/home/stack/overcloudrc') }}"
    source {{ tempest_venv }}/bin/activate
    {{ config_command | default('python config_tempest/config_tempest.py') }} \
        --create \
        --debug \
        --image "/tmp/{{ images[0].url | basename }}" \
        --network-id {{ tempest_net_id.ansible_facts.openstack_networks.0.id }} \
        identity.uri {{ osp_auth.stdout }} \
        identity.admin_password {{ osp_password.stdout }} \
        identity.region regionOne DEFAULT.debug false \
        compute.image_ssh_user {{ image_ssh_user }} \
        validation.image_ssh_user {{ image_ssh_user }} \
        {% if tempest_flavor_name is defined %}
        compute.flavor_ref {{ openstack_flavors[0].id }} \
        {% endif %}
        compute-feature-enabled.live_migration true \
        {% if tempest_config is defined %}
        hypervisor.external_config_file {{ tempest_dir }}/{{ tempest_config | basename }} \
        {% endif %}
        neutron_plugin_options.image_is_advanced true \
        neutron_plugin_options.max_networks_per_project 1 \
        {% if tempest_options is defined %}
          {% for option in tempest_options %}
            {{ option }} \
          {% endfor %}
        {% endif %}
        --out "{{ tempest_dir }}/{{ tempest_main }}/etc/tempest.conf"
  args:
    executable: /bin/bash
    chdir: "{{ tempest_dir }}/{{ tempest_conf }}"

- name: Check if the tempest tests repository exists
  tags: run_tempest_test
  stat:
    path: "{{ tempest_dir }}/{{ tempest_main }}/.stestr"
  register: testrepository

- name: Delete the tempest tests repository to drop previous results
  tags: run_tempest_test
  file:
    path: "{{ tempest_dir }}/{{ tempest_main }}/.stestr"
    state: absent
  when: testrepository.stat.exists == true

- name: Create tempest tests repository for the clean state tests run
  tags: run_tempest_test
  shell: >
    source {{ tempest_dir }}/venv/bin/activate;
    {{ tempest_dir }}/venv/bin/stestr init;
  args:
    executable: /bin/bash
    chdir: "{{ tempest_dir }}/{{ tempest_main }}"

- name: Execute the tempest tests and save the results
  tags: run_tempest_test
  shell: >
    source {{ tempest_dir }}/venv/bin/activate;
    stestr run --subunit
    --no-discover {{ item }}
    >> .stestr/tempest_results.subunit
  args:
    executable: /bin/bash
    chdir: "{{ tempest_dir }}/{{ tempest_main }}"
  with_items: "{{ tempest_tests }}"

- name: Generate results report in a JunitXML format
  tags: run_tempest_test
  shell: |
    source {{ tempest_dir }}/venv/bin/activate
    subunit2junitxml --output-to={{ tempest_dir }}/tempest.xml \
    < .stestr/tempest_results.subunit | subunit2pyunit
  args:
    executable: /bin/bash
    chdir: "{{ tempest_dir }}/{{ tempest_main }}"

- name: Generate statistics of executed tests
  tags: run_tempest_test
  shell: |
    source {{ tempest_dir }}/venv/bin/activate
    subunit-stats --no-passthrough .stestr/tempest_results.subunit
  args:
    executable: /bin/bash
    chdir: "{{ tempest_dir }}/{{ tempest_main }}"
  register: tests_stats
  failed_when: "tests_stats.rc == 2"

- name: Copy tempest log file to the main tempest directory
  tags: run_tempest_test
  copy:
    remote_src: yes
    src: "{{ tempest_dir }}/{{ tempest_main }}/tempest.log"
    dest: "{{ tempest_dir }}/tempest.log"

- name: Print the output results of the tempest tests
  tags: run_tempest_test
  vars:
    msg: |
      Tests statistics:

      {{ tests_stats.stdout }}

      For the details, look at the:
      {{ tempest_dir }}/tempest.xml
      {{ tempest_dir }}/tempest.log
  debug:
    msg: "{{ msg.split('\n') }}"
