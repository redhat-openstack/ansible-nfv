---

- name: Check the existance of rc file
  stat:
    path: "{{ item }}"
  with_items:
    - "{{ ospd_rc_file }}"
    - "{{ packstack_rc_file }}"
  register: ospd_rc_file_locate

- name: Set OSPD rc file to use
  set_fact:
    rc_file: "{{ ospd_rc_file }}"
  when: ospd_rc_file_locate.results[0].stat.exists == True

- name: Set Packstack rc file to use
  set_fact:
    rc_file: "{{ packstack_rc_file }}"
  when: ospd_rc_file_locate.results[1].stat.exists == True

- name: Register Auth URL
  shell: "cat {{ rc_file }} | grep AUTH | cut -d '=' -f 2"
  register: osp_auth

- name: Register Username
  shell: "cat {{ rc_file }} | grep USERNAME | cut -d '=' -f 2"
  register: osp_username

- name: Register Tenant name
  shell: "cat {{ rc_file }} | grep TENANT | cut -d '=' -f 2"
  register: osp_tenant

- name: Register Password
  shell: "cat {{ rc_file }} | grep OS_PASSWORD | cut -d '=' -f 2"
  register: osp_password

- name: Install packages and dependency
  become: True
  yum:
    name: "{{ item }}"
    state: 'installed'
  with_items:
    - 'git'
    - 'wget'
    - 'python-devel'
    - 'gcc'
    - 'libffi-devel'
    - 'libxml2-devel'
    - 'libxslt-devel'
    - 'mariadb-devel'
    - 'openssl-devel'
    - 'python-virtualenv'
    - '@Development tools'

- name: Git clone Tempest & Tempest-NFV-plugin
  git:
    repo: "{{ item.url }}"
    dest: "{{ item.dest }}"
    clone: yes
    update: yes
  with_items:
    - { url: '{{ tempest_url }}', dest: "{{ tempest_dir }}/tempest" }
    - { url: '{{ nfv_plugin_url }}', dest: "{{ tempest_dir }}/tempest-nfv-plugin" }

- name: Check if tempest.conf exists
  stat:
    path: '{{ tempest_dir }}/tempest/.venv/'
  register: venv

- name: Run install_venv.py script
  command: 'python {{ tempest_dir }}/tempest/tools/install_venv.py'
  args:
    chdir: '{{ tempest_dir }}/tempest'
  when: venv.stat.exists == False

- name: Install Tempest_plugin in our Virtual env
  pip:
    name: '{{ tempest_dir }}/tempest-nfv-plugin/tempest_plugin/'
    virtualenv: '{{ tempest_dir }}/tempest/.venv'
    extra_args: -e
  when: venv.stat.exists == False

- name: Copy requirments file
  copy:
    src: pip_ansible_openstack_packages.txt
    dest: '{{ tempest_dir }}'

- name: Install requirments for ansible
  pip:
    name: '{{ tempest_dir }}/pip_ansible_openstack_packages.txt'
    virtualenv: '{{ tempest_dir }}/tempest/.venv'
    extra_args: -r

- name: Creating Openstack env folder
  file:
    path: /etc/openstack
    state: directory
    mode: 0755

- name: Create the clouds.yml file for future tasks
  template:
    src: "clouds.yml.j2"
    dest: "/etc/openstack/clouds.yml"
    mode: 0755

- name: Get network-id
  vars:
    ansible_python_interpreter: "/mnt/tempest/.venv/bin/python"
  os_networks_facts:
    cloud: openstack
    name:  external
- debug:
    var: openstack_networks

- name: Generate tempest.conf file
  stat:
    path: '{{ tempest_dir }}/tempest/etc/tempest.conf'
  register: tempest_conf

- name: Run config_tempest script
  vars:
    ansible_python_interpreter: "/mnt/tempest/.venv/bin/python"
  shell: '{{ tempest_dir }}/tempest/.venv/bin/python {{ tempest_dir }}/tempest/tools/config_tempest.py --create --debug --image {{ osp_image }} identity.uri {{ osp_auth.stdout }} identity.admin_password {{ osp_password.stdout }}  --network-id {{ openstack_networks[0].id }}'
  args:
    chdir: '{{ tempest_dir }}/tempest'

- name: Changing the image_ssh_user value
  lineinfile:
    dest: '{{ tempest_dir }}/tempest/etc/tempest.conf'
    regexp: "^image_ssh_user"
    line: "image_ssh_user = {{ image_ssh_user }}"
  when: image_ssh_user is defined

- name: Adding port_vnic_type variable
  ini_file:
    dest: '{{ tempest_dir }}/tempest/etc/tempest.conf'
    section: network
    option: port_vnic_type
    value: direct
  when: 'port_vnic_type|bool == true'

- name: Run TestServerBasicOps Test
  shell: >
    source "{{rc_file}}";
    source /mnt/tempest/.venv/bin/activate;
    cd /mnt/tempest;
    /usr/bin/bash /mnt/tempest/tools/run-tests.sh tempest.scenario.test_server_basic_ops.TestServerBasicOps >> /mnt/tempest/tempest-output.txt
  when: TestServerBasicOps == 'run'
