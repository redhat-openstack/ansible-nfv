---

- name: Create Tempest directory
  file:
    path: "{{ tempest_dir }}"
    mode: 0755
    state: directory

- name: Git clone Tempest & Tempest-NFV-plugin
  git:
    repo: "{{ item.url }}"
    dest: "{{ tempest_dir }}/{{ item.name }}"
    version: "{{ item.branch }}"
    clone: yes
    update: yes
  with_items: "{{ tempest_repo }}"

- name: Check if tempest.conf exists
  stat:
    path: '{{ tempest_dir }}/{{ tempest_main }}/.venv/'
  register: venv

- name: Run install_venv.py script
  command: 'python {{ tempest_dir }}/{{ tempest_main }}/tools/install_venv.py'
  args:
    chdir: '{{ tempest_dir }}/{{ tempest_main }}'
  when: venv.stat.exists == False

- name: Install Tempest_plugin in our Virtual env
  pip:
    name: '{{ tempest_dir }}/{{ tempest_nfv_plugin }}/tempest_plugin/'
    virtualenv: '{{ tempest_dir }}/{{ tempest_main }}/.venv'
    extra_args: -e
  when: venv.stat.exists == False

- name: Install additional packages to the venv
  pip:
    name: "{{ item }}"
    virtualenv: "/{{ tempest_dir }}/{{ tempest_main }}/.venv"
    extra_args: '--upgrade'
  with_items: "{{ pip_packages }}"

- name: Get external Network ID
  vars:
    ansible_python_interpreter: "/tmp/ansible_venv/bin/python"
  os_networks_facts:
    cloud: openstack
    filters:
      router:external: true
  register: tempest_net_id

- name: Download test image
  get_url:
    url: "{{ osp_image }}"
    dest: "/tmp/{{ osp_image | basename }}"
    timeout: 100

- name: Run config_tempest script
  shell: >
    {{ tempest_dir }}/{{ tempest_main }}/.venv/bin/python
    {{ tempest_dir }}/{{ tempest_main }}/tools/config_tempest.py --create --debug
    --image "/tmp/{{ osp_image | basename }}"
    identity.uri {{ osp_auth.stdout }}
    identity.admin_password {{ osp_password.stdout }}
    --network-id {{ tempest_net_id.ansible_facts.openstack_networks.0.id }}
  args:
    chdir: '{{ tempest_dir }}/{{ tempest_main }}'

- name: Create flavor
  vars:
    ansible_python_interpreter: "/tmp/ansible_venv/bin/python"
  os_nova_flavor:
    cloud: openstack
    name: "{{ item.name }}"
    ram: "{{ item.ram }}"
    disk: "{{ item.disk }}"
    vcpus: "{{ item.vcpus }}"
    state: present
  with_items: "{{ test_flavors }}"
  register: flavor_id

- name: Set flavors keys
  shell: >
    source "{{ rc_file }}";
    openstack flavor set
    --property "{{ item.1 }}"
    "{{ item.0.name }}"
  with_subelements:
    - "{{ test_flavors }}"
    - property
    - skip_missing: True

- name: Modify tempest.conf
  ini_file:
    dest: '{{ tempest_dir }}/{{ tempest_main }}/etc/tempest.conf'
    section: "{{ item.sect }}"
    option: "{{ item.opt }}"
    value: "{{ item.val }}"
  with_items:
    - { sect: 'network', opt: 'port_vnic_type', val: "{{ port_vnic_type |default('normal')}}" }
    - { sect: 'compute', opt: 'image_ssh_user', val: "{{ image_ssh_user }}" }
    - { sect: 'compute', opt: 'flavor_ref', val: "{{ tempest_flavor_id | default(flavor_id.results.0.id) }}" }
    - { sect: 'hypervisor', opt: 'private_key_file', val: "{{ private_key_dest }}" }
    - { sect: 'hypervisor', opt: 'user', val: "{{ user_for_overcloud_nodes }}" }
    - { sect: 'hypervisor', opt: 'external_config_file', val: "{{ tests_config_file | default(omit) }}" }

- name: Execute Tempest Test
  tags: run_tempest_test
  shell: >
    source "{{ rc_file | default('/home/stack/overcloudrc') }}";
    source {{ tempest_dir }}/{{ tempest_main }}/.venv/bin/activate;
    cd {{ tempest_dir }}/{{ tempest_main }};
    /usr/bin/bash /{{ tempest_dir }}/{{ tempest_main }}/tools/run-tests.sh {{ item }}
    | tee {{ tempest_dir }}/{{ tempest_main }}/tempest-results.txt
  with_items: "{{ tempest_tests }}"
  register: tempest_results

- name: Set flag
  tags: run_tempest_test
  set_fact:
    flag: ''

- name: Set flag
  tags: run_tempest_test
  set_fact:
    flag: failed
  when: "'FAILED' in item.stdout"
  with_items: "{{ tempest_results.results }}"

- name: Print the output of the test
  tags: run_tempest_test
  debug:
    msg: "{{ tempest_results.results | map(attribute='stdout_lines') | list }}"

- name: Fail the play if tempest run failed
  tags: run_tempest_test
  fail:
    msg: "Tempest test failed. Check the log for the details."
  when: flag == "failed"
