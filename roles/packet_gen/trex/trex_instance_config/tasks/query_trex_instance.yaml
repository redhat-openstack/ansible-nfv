- name: Query Trex Server Ports
  import_role:
    name: roles/post_install/discover_instance_ports
  vars:
    query_instance: "{{ ansible_hostname }}"
  delegate_to: "{{ groups['undercloud'] | first }}"

- debug:
    var: instance_nics | flatten(levels=1)

- name: Parse Trex Server SR-IOV NICs
  set_fact:
    trex_instance_sriov_nics: "{{ trex_instance_sriov_nics | default([]) }} + [ {{ item }} ]"
  loop: "{{ instance_nics | flatten(levels=1) }}"
  when: item['binding:vnic_type'] == "direct-physical" or
        item['binding:vnic_type'] == "direct"

- name: Fail If There Are More/Less Than 2 SR-IOV NICs
  fail:
    msg: "Current automated flow only supports 2 SR-IOV NICs connected to instance, please provide an instance with the allowed number of NICs"
  when: trex_instance_sriov_nics | length != 2

- name: Gather Ansible Facts
  setup:

- name: Dump Performance Facts To Ansible Local Facts
  block:
    - name: Retrieve info From lshw command
      shell: "lshw -C network -json"
      register: lshw_info
      become: true

    - name: Create Local Facts Directory
      file:
        path: /etc/ansible/facts.d
        state: directory
        recurse: True
      become: True

    - name: Retrieve NICs Gathered By Ansible Facts
      set_fact:
        ans_nics: "{{ ans_nics | default([]) + [{'name': item, 'mac_address': ansible_facts[item]['macaddress'], 'pci_slot': ((lshw_info['stdout'] | from_json | selectattr('serial', 'defined') | selectattr('serial', 'equalto', ansible_facts[item]['macaddress']) | map(attribute='businfo') | list + ['']) | first) | regex_replace('^.*@', '') }] }}"
      loop: "{{ ansible_interfaces | difference(['lo']) }}"

    - name: Dump Content To File
      copy:
        content: "{{ ans_nics }}"
        dest: /etc/ansible/facts.d/nic_topology.fact
      become: true

    - name: Gather Ansible Facts
      setup:

    - name: Deactivate Non External Kernel NICs
      shell: "ip link set dev {{ item }} down"
      loop: "{{ ansible_interfaces | difference(['lo', ansible_default_ipv4['alias']]) }}"
      become:
  when: not "nic_topology" in ansible_local.keys()
