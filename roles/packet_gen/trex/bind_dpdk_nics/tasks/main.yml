- name: Set isolcpus for testpmd
  set_fact:
    isolcpus: "{{ testpmd_lcores.split(',')[1:]|join(',') }}"
  when: "'trex' not in group_names"

- name: Set isolcpus for trex
  set_fact:
    isolcpus: "{{ ([trex_platform['latency_thread_id']]+trex_platform['dual_if'][0]['threads'])|join(',') }}"
  when: "'trex' in group_names"

- name: Add parameter to the grub
  lineinfile:
    dest: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX="(?!.* {{ item.regex }})(.*)"'
    line: 'GRUB_CMDLINE_LINUX="\1 {{ item.context }}"'
    state: present
    backrefs: yes
  loop:
    - { regex: 'hugepagesz=', context: 'hugepagesz=1G default_hugepagesz=1G hugepages={{ hugepages_count }}' }
    - { regex: 'isolcpus=', context: "isolcpus={{ isolcpus }}" }
  register: grub
  become: True

- name: Make grub
  command: "grub2-mkconfig -o /boot/grub2/grub.cfg"
  when: grub.changed
  register: makegrub
  become: True

- name: Set the vfio_pci module to load on boot
  lineinfile:
    dest: /etc/modules-load.d/vfio_pci.conf
    regexp: "^vfio_pci"
    line: "vfio_pci"
    create: yes
  become: True

- name: Permanently enable the no-IOMMU mode
  lineinfile:
    dest: /etc/modprobe.d/vfio-noiommu.conf
    regexp: "^options vfio"
    line: "options vfio enable_unsafe_noiommu_mode=1"
    create: yes
  become: True

- name: Restart machine
  shell: sleep 2 && shutdown -r now "Ansible updates triggered"
  async: 1
  poll: 0
  ignore_errors: true
  when: makegrub.changed
  become: True

- name: Wait 300 seconds, but only start checking after 60 seconds
  wait_for_connection:
    delay: 60
    timeout: 300

- name: Check if DPDK Compiled Binaries Directory Exists
  stat:
    path: "{{ dpdk_compiled_dir }}"
  register: dpdk_dir
  failed_when: not dpdk_dir['stat']['exists']
  become: True

- name: Retrieve default NIC
  set_fact:
    nic_def: "{{hostvars[inventory_hostname]['ansible_default_ipv4']['alias']}}"

- name: Retrieve all NICs
  set_fact:
    nic_lst: "{{hostvars[inventory_hostname]['ansible_interfaces']}}"

- name: List of NICs to be bound to DPDK
  set_fact:
    nic_down: "{{ nic_lst | difference([nic_def]+['lo'])  }}"

- name: Deactivate NICs to be bound to DPDK
  shell: "ifconfig {{ item }} down"
  loop: "{{nic_down}}"
  become: True

- name: Retrieve Non Active NICs' PCI Slots
  shell: "python {{ dpdk_root_dir }}/usertools/dpdk-devbind.py --status | grep -v Active | grep 0000 | cut -d ' ' -f 1 | paste -sd ' '"
  register: instance_nics_pci_slots
  become: True

- name: Bind Parsed NICs to DPDK
  block:
    - name: Create Hugepages Mountpoint
      file:
        path: /mnt/huge
        state: directory
        recurse: True

    - name: Set Huge Pages Amount
      sysctl:
        name: vm.nr_hugepages
        value: "{{ hugepages_count }}"
        state: present

    - name: Mount Hugepages
      mount:
        path: /mnt/huge
        src: nodev
        fstype: hugetlbfs
        opts: pagesize=1GB
        state: mounted

    - name: Load Required Kernel Modules
      modprobe:
        name: "{{ item['name'] }}"
        state: present
        params: "{{ item['params'] | default(omit) }}"
      loop:
        - {'name': 'vfio', 'params': 'enable_unsafe_noiommu_mode=1'}
        - {'name': 'vfio-pci'}

    - name: Bind DPDK NICs
      command: "{{ dpdk_root_dir }}/usertools/dpdk-devbind.py -b vfio-pci {{ instance_nics_pci_slots['stdout'] }}"

  become: True

- name: Set DuT Destination MAC Addresses
  block:
    - name: Fetch Mac Addresses Of NICs Bound To Kernel
      shell: 'grep -vh "00:00:00:00:00:00" /sys/class/net/*/address'
      register: kernel_nics

    - name: Query DuT Server Ports
      import_role:
        name: roles/post_install/discover_instance_ports
      vars:
        query_instance: "{{ ansible_hostname }}"
      delegate_to: undercloud-0

    - name: Map DuT NICs To Helper Variable
      set_fact:
        dut_ports: "{{ dut_ports | default([]) }} + {{ item['ansible_facts']['openstack_ports'] }}"
      loop: "{{ instance_ports['results'] }}"

    - name: Parse DuT Destination Macs
      set_fact:
        dut_macs: "{{ dut_ports | map(attribute='mac_address') | reject('search', kernel_nics['stdout']) | list | join(',') }}"
  when:
    - dut_mac is not defined
    - discover_dut_macs | default(False)
