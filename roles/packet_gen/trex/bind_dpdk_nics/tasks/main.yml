- name: Check if DPDK Compiled Binaries Directory Exists
  stat:
    path: "{{ dpdk_compiled_dir }}"
  register: dpdk_dir
  failed_when: not dpdk_dir['stat']['exists']
  become: True

- name: Retrieve Non Active NICs' PCI Slots
  shell: "python {{ dpdk_root_dir }}/usertools/dpdk-devbind.py --status | grep -v Active | grep 0000 | cut -d ' ' -f 1 | paste -sd ' '"
  register: instance_nics_pci_slots
  become: True

- name: Bind Parsed NICs to DPDK
  shell: |
    mkdir -p /mnt/huge
    mount -t hugetlbfs nodev /mnt/huge
    echo 64 > /sys/devices/system/node/node0/hugepages/hugepages-1048576kB/nr_hugepages
    modprobe -r vfio
    modprobe -v vfio enable_unsafe_noiommu_mode=1
    modprobe -v vfio-pci
    python {{ dpdk_root_dir }}/usertools/dpdk-devbind.py -b vfio-pci {{ instance_nics_pci_slots['stdout'] }}
  become: True

- name: Set DuT Destination MAC Addresses
  block:
    - name: Fetch Mac Addresses Of NICs Bound To Kernel
      shell: 'cat /sys/class/net/*/address | grep -v "00:00:00:00:00:00"'
      register: kernel_nics

    - debug:
        var: ansible_hostname

    - name: Query DuT Server Ports
      import_role:
        name: roles/post_install/discover_instance_ports
      vars:
        query_instance: "{{ ansible_hostname | replace('-','_') }}"
      delegate_to: undercloud-0

    - name: Map DuT NICs To Helper Variable
      set_fact:
        dut_ports: "{{ dut_ports | default([]) }} + {{ item['ansible_facts']['openstack_ports'] }}"
      loop: "{{ instance_ports['results'] }}"

    - name: Parse DuT Destination Macs
      set_fact:
        dut_macs: "{{ dut_ports | map(attribute='mac_address') | reject('search', kernel_nics['stdout']) | list | join(',') }}"
  when:
    - dut_mac is not defined
    - discover_dut_macs | default(False)