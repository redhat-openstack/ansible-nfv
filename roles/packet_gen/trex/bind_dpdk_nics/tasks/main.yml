- name: Check if DPDK Compiled Binaries Directory Exists
  stat:
    path: "{{ dpdk_compiled_dir }}"
  register: dpdk_dir
  failed_when: not dpdk_dir['stat']['exists']
  become: True

- name: Retrieve default NIC
  set_fact:
    nic_def: "{{hostvars[inventory_hostname]['ansible_default_ipv4']['alias']}}"

- name: Retrieve all NICs
  set_fact:
    nic_lst: "{{hostvars[inventory_hostname]['ansible_interfaces']}}"

- name: List of NICs to be bound to DPDK
  set_fact:
    nic_down: "{{ nic_lst | difference([nic_def]+['lo'])  }}"

- name: Deactivate NICs to be bound to DPDK
  shell: "ip link set dev {{ item }} down"
  loop: "{{nic_down}}"
  become: True

- name: Retrieve Non Active NICs' PCI Slots
  shell: "python {{ dpdk_root_dir }}/usertools/dpdk-devbind.py --status | grep -A 5 'Network devices using kernel driver' | grep -v Active | grep 0000 | cut -d ' ' -f 1 | paste -sd ' '"
  register: instance_nics_pci_slots
  become: True

- name: Bind Parsed NICs to DPDK
  block:
    - name: Create Hugepages Mountpoint
      file:
        path: /mnt/huge
        state: directory
        recurse: True

    - name: Set Huge Pages Amount
      sysctl:
        name: vm.nr_hugepages
        value: "{{ hugepages_count }}"
        state: present

    - name: Mount Hugepages
      mount:
        path: /mnt/huge
        src: nodev
        fstype: hugetlbfs
        opts: pagesize=1GB
        state: mounted

    - name: Load Required Kernel Modules
      modprobe:
        name: "{{ item['name'] }}"
        state: present
        params: "{{ item['params'] | default(omit) }}"
      loop:
        - {'name': 'vfio'}
        - {'name': 'vfio-pci'}

    - name: Ensure enable_unsafe_noiommu_mode
      shell: "echo 1 | sudo tee /sys/module/vfio/parameters/enable_unsafe_noiommu_mode"

    - name: Load Mellanox Kernel Modules when configured
      modprobe:
        name: mlx5_core
        state: present
      when: dpdk_binding_driver == "mlx5_core"

    - name: Bind DPDK NICs
      command: "{{ dpdk_root_dir }}/usertools/dpdk-devbind.py -b {{dpdk_binding_driver}} {{ instance_nics_pci_slots['stdout'] }}"

  become: True

- name: Set DuT Destination MAC Addresses
  block:
    - name: Fetch Mac Addresses Of NICs Bound To Kernel
      shell: 'find /sys/devices -path "*virtio*" -name "address" -exec cat {} \;'
      register: kernel_nics

    - name: Query DuT Server Ports
      import_role:
        name: roles/post_install/discover_instance_ports
      vars:
        query_instance: "{{ ansible_hostname }}"
      delegate_to: "{{ groups['undercloud'] | first }}"

    - name: Map DuT NICs To Helper Variable
      set_fact:
        dut_ports: "{{ dut_ports | default([]) + item['ports'] }}"
      loop: "{{ instance_ports['results'] }}"

    - name: Parse DuT Destination Macs
      set_fact:
        dut_macs: "{{ dut_ports | map(attribute='mac_address') | reject('search', kernel_nics['stdout']) | list | join(',') }}"
  when:
    - dut_mac is not defined
    - discover_dut_macs | default(False)
