# TODO (vkhitrin): Refactor tasks to fetch MACs in single play
- name: Parse DuT MACs
  set_fact:
    dut_macs: "{{ hostvars[groups[dut_group][0]]['dut_macs'] }}"
  when:
    - dut_macs is not defined
    - hostvars[groups[dut_group][0]]['dut_macs'] is defined

- name: Parse TRex VLANs
  set_fact:
    trex_vlans: "{{ trex_instance_nics_info|map(attribute='vlan')|list|join(',') }}"
  when:
    - trex_instance_nics_info is defined
    - trex_vlans is not defined
    - trex_set_vlan

- name: Start PMD load balance in DuT
  delegate_to: "{{ dut_compute if dut_compute else 'none' }}"
  become: True
  block:
    - include_role:
        name: pmd_load_balance
        tasks_from: start.yml
  when:
    - dut_compute|length > 0
    - pmd_lb is defined
    - pmd_lb in ['ovs', 'user']

#TODO: add --dst-ports {{ trex_dest_ports}} if it works
- name: Set Binary Search Command
  set_fact:
    traffic_cmd: >
      {{ binary_search_bin }} --traffic-generator trex-txrx
      --frame-size {{ trex_frame_size }}
      --max-loss-pct {{ trex_max_lost_pct }}
      --send-teaching-warmup
      --dst-macs {{ dut_macs }}
      --num-flows {{ trex_flows }}
      {% if trex_set_vlan %}
        --vlan-ids {{ trex_vlans }}
      {%- endif %}
      --use-src-ip-flows {{ use_src_ip_flows  }}
      --use-dst-ip-flows {{ use_dst_ip_flows }}
      --use-src-mac-flows {{ use_src_mac_flows }}
      --use-dst-mac-flows {{ use_dst_mac_flows }}
      --use-src-port-flows {{ use_src_port_flows  }}
      --use-dst-port-flows {{ use_dst_port_flows }}
      --validation-runtime {{ trex_validation }}
      --search-runtime {{ trex_search }}
      --negative-packet-loss  {{ negative_packet_loss }}
      {% if trex_max_retries is defined %}
        --max-retries {{ trex_max_retries }}
      {%- endif %}
      {% if trex_rate is defined %}
        --rate {{ trex_rate }}
      {%- endif %}
      {% if trex_min_rate is defined %}
        --min-rate {{ trex_min_rate }}
      {%- endif %}
      {% if binary_search_use_device_stats %}
        --use-device-stats
      {%- endif %}
      {% if binary_search_disable_upward_search %}
        --disable-upward-search
      {%- endif %}
      {% if binary_search_warmup_trial_runtime is defined %}
        --warmup-trial --warmup-trial-runtime {{ binary_search_warmup_trial_runtime }}
      {%- endif %}
  when: traffic_cmd is not defined

- name: Load balance PMD before binary search starts (if requested)
  block:
    - name: Set time period for load balance test
      set_fact:
        pmd_lb_pretest_sec: "{{ trex_search }}"
      when:
        - pmd_lb_pretest_sec is not defined or pmd_lb_pretest_sec == 'None'

    - name: Generate traffic for load balancing PMD
      shell: python -u {{ trafficgen_dir }}/trex-txrx.py
          --device-pairs=0:1
          --active-device-pairs=0:1
          --mirrored-log
          {% if trex_rate is defined %}
            --rate {{ trex_rate }}
          {%- endif %}
          --rate-unit=mpps
          --size={{ trex_frame_size }}
          --runtime={{ pmd_lb_pretest_sec }}
          --runtime-tolerance=5
          --run-bidirec=1
          --run-revunidirec=0
          --num-flows={{ trex_flows }}
          --dst-macs={{ dut_macs }}
          {% if trex_set_vlan %}
            --vlan-ids={{ trex_vlans }}
          {%- endif %}
          --use-src-ip-flows=1
          --use-dst-ip-flows=1
          --use-src-mac-flows=0
          --use-dst-mac-flows=0
          --use-src-port-flows=1
          --use-dst-port-flows=1
          --use-protocol-flows=0
          --packet-protocol=UDP
          --stream-mode=continuous
      register: pmd_lb_pretest_output
  when:
    - pmd_lb is defined
    - pmd_lb in ['ovs', 'user']
    - pmd_lb_pretest == True

- debug:
    var: pmd_lb_pretest_output

- name: Pause PMD load balance in DuT
  delegate_to: "{{ dut_compute if dut_compute else 'none' }}"
  become: True
  block:
    - include_role:
        name: pmd_load_balance
        tasks_from: pause.yml
  when:
    - dut_compute|length > 0
    - pmd_lb is defined
    - pmd_lb in ['ovs', 'user']
    - pmd_lb_pretest == True

- include_tasks: binary_search_recursion.yml

- name: Report PMD load balance status and stop it in DuT
  delegate_to: "{{ dut_compute if dut_compute else 'none' }}"
  become: True
  block:
    - name: Query PMD load balance status
      include_role:
        name: pmd_load_balance
        tasks_from: status.yml

    - name: Remove any existing status log
      file:
        path: "{{ pmd_lb_status_log }}"
        state: absent

    - name: Save PMD load balance status
      copy:
        content: "{{ pmd_lb_status_output['stdout'] }}"
        dest: "{{ pmd_lb_status_log }}"

    - name: Stop PMD load balance
      include_role:
        name: pmd_load_balance
        tasks_from: stop.yml
  when:
    - dut_compute|length > 0
    - pmd_lb is defined
    - pmd_lb in ['ovs', 'user']

- name: Copy PMD load balance status from DuT
  delegate_to: "{{ groups['undercloud'] | first }}"
  copy:
    content: "{{ pmd_lb_status_output['stdout'] }}"
    dest: "{{ pmd_lb_status_log }}"
  when:
    - pmd_lb is defined
    - pmd_lb in ['ovs', 'user']

- name: Save Binary Search Script Result To File
  copy:
    content: "{{ perf_output['stdout'] }}"
    dest: "{{ binary_perf_log }}"
  delegate_to: "{{ groups['undercloud'] | first }}"

- name: Stop TestPMD On DuT
  shell: "tmux list-sessions -F '#S' | xargs -n1 tmux kill-session -t"
  become: True
  delegate_to: "{{ groups[dut_group]|first }}"
  when: "dut_group and dut_group|length > 0"

- name: Parse JSON Result From Output File
  block:
    - name: Read Performance Result Log
      slurp:
        src: "{{ binary_perf_log }}"
      register: perf_result

    - name: Parse Perfomance Log To JSON Format
      set_fact:
        perf_json: "{{ perf_result['content'] | b64decode | replace('RESULT', '') }}"
  delegate_to: "{{ groups['undercloud'] | first }}"

- name: dut_compute tasks
  delegate_to: "{{ dut_compute if dut_compute else 'none' }}"
  when: dut_compute|length > 0
  block:
    - name: Fetch OVS version from compute node
      shell: "ovs-vsctl --version | grep 'Open vSwitch' | sed 's/ovs-vsctl \\(.*\\) //'"
      register: compute_ovs_version

    - name: Check If OVN Is Configured
      command: 'hiera -c /etc/puppet/hiera.yaml enabled_services'
      become: True
      register: deployment_hiera_enabled_services

    - name: Retrieve OVN Version
      shell: "podman exec -it ovn_controller ovn-sbctl --version | head -n1 | sed 's/.* \\(.*\\)/\\1/g'"
      become: True
      when: "'ovn' in deployment_hiera_enabled_services['stdout']"
      register: ovn_version

- name: Fetch puddle/compose from undercloud
  slurp:
    src: /home/stack/core_puddle_version
  register: deployment_core_puddle
  delegate_to: "{{ groups['undercloud'] | first }}"

- name: Append extra info to performance log for OVS
  lineinfile:
    path: "{{ binary_perf_log }}"
    line: "OVS_Version: {{ compute_ovs_version['stdout'] }}"
  when: compute_ovs_version is not skipped
  delegate_to: "{{ groups['undercloud'] | first }}"

- name: Append extra info to performance log for puffle
  lineinfile:
    path: "{{ binary_perf_log }}"
    line: "Puddle: {{ deployment_core_puddle['content'] | b64decode }}"
  delegate_to: "{{ groups['undercloud'] | first }}"

- name: Append extra OVN version to log
  lineinfile:
    path: "{{ binary_perf_log }}"
    line: "OVN_Version: {{ ovn_version['stdout'] }}"
  when: ovn_version is not skipped
  delegate_to: "{{ groups['undercloud'] | first }}"

- name: Print Perfomance Result JSON
  debug:
    var: perf_json

# TODO: Add additional valuable information for both states
- name: Print Performance Result
  debug:
    msg: |
      binary-search command:
      {{ perf_output['cmd'] }}

      {% if perf_output.rc == 0 %}

      Performance Flow Succeded

      {% else %}

      Performance Flow Failed

      {% endif %}
  failed_when: perf_output['rc'] != 0
