- name: Check If Tmux Sessions Are Running
  shell: "tmux list-sessions -F '#S'"
  register: tmux_sessions
  failed_when: False

- name: Kill Tmux Sessions
  shell: "tmux list-sessions -F '#S' | xargs -n1 tmux kill-session -t"
  when: tmux_sessions['stdout_lines'] != []

- name: Set HCI stress command using block size 4K
  set_fact:
    hci_cmd: >
      sudo /usr/local/bin/fio --name= {{ hci_stress_cmd.user }} --filename=
      {{ hci_stress_cmd.file_name }} --ramp_time={{ hci_stress_cmd.ramp_time }} --startdelay=
      {{hci_stress_cmd.startdelay }} -rw={{ hci_stress_cmd.rw }} --bs={{ hci_stress_cmd.bs }} --direct=
      {{ hci_stress_cmd.direct }} --size={{ hci_stress_cmd.size }} --runtime=
      {{ hci_stress_cmd.runtime }} --time_based={{ hci_stress_cmd.time_based }} --output=
      {{ hci_stress_cmd.output_file }}  &>{{ hci_stress_cmd.log_file }}
  when: hci_cmd is not defined

- name: Log HCI Command
  debug:
    var: trex_cmd

- name: Run HCI Stress In Dettached Tmux Session
  shell: |
    tmux new -d -s hci
    tmux send-keys -t hci "{{ hci_cmd }}" ENTER
  become: True

- name: Pause And Let HCI Stress Run
  pause:
    seconds: 10

- name: Query If HCI Aborted
  slurp:
    src: '{{ hci_stress_cmd.log_file }}'
  register: hci_log_output

- name: Print HCI Error
  fail:
    msg: "{{ hci_log_output['content'] | b64decode }}"
  failed_when: "'ERROR' in hci_log_output['content'] | b64decode"
