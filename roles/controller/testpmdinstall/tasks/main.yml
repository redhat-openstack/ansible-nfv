---

- shell: "cat {{ keystone }} | grep AUTH | cut -d '=' -f 2"
  register: osp_auth

- shell: "cat {{ keystone }} | grep USERNAME | cut -d '=' -f 2"
  register: osp_username

- shell: "cat {{ keystone }} | grep TENANT | cut -d '=' -f 2"
  register: osp_tenant

- shell: "cat {{ keystone }} | grep OS_PASSWORD | cut -d '=' -f 2"
  register: osp_password

- file:
    path: /etc/openstack 
    state: directory 
    mode: 0755

- name: Create the base overcloud deploy script
  template:
    src: "clouds.yml.j2"
    dest: "/etc/openstack/clouds.yml"
    mode: 0755

- name: Install packages and dependency
  yum:
    name: "{{ item.name }}"
    state: 'installed' 
  with_items:
    - { name: 'git' }
    - { name: 'wget' }
    - { name: 'python-devel' }
    - { name: 'gcc' }
    - { name: 'libffi-devel' }
    - { name: 'libxml2-devel' }
    - { name: 'libxslt-devel' }
    - { name: 'mariadb-devel' }
    - { name: 'openssl-devel' }
    - { name: 'python-virtualenv' }
    - { name: '@Development tools' }

- name: get repo requirements
  pip:
    virtualenv: "/root/.venv"
    name: "{{ item.name }}"
    extra_args: '--upgrade'
  with_items:
    - { name: 'setuptools' }
    - { name: 'ansible' }
    - { name: 'pytz' }
    - { name: 'shade' }
    - { name: 'functools32' }

- name: Create network
  vars:
    ansible_python_interpreter: "/root/.venv/bin/python"
  os_network:
    cloud: openstack
    name: external
    state: present
    external: true
    provider_network_type: "{{ provider_network_type }}"
    provider_physical_network: "{{ provider_physical_network }}"
    provider_segmentation_id: "{{ provider_segmentation_id }}"
  register: network_id

- name: Create subnet
  vars:
    ansible_python_interpreter: "/root/.venv/bin/python"
  os_subnet:
    cloud: openstack
    name: external_subnet
    allocation_pool_start: "{{ allocation_pool_start }}"
    allocation_pool_end: "{{ allocation_pool_end }}"
    cidr: "{{ cidr }}"
    dns_nameservers: "{{ dns_nameservers }}"
    enable_dhcp: True
    network_name: external
    state: present

- name: Create second network
  vars:
    ansible_python_interpreter: "/root/.venv/bin/python"
  os_network:
    cloud: openstack
    name: external2
    state: present
    external: true
    provider_network_type: "{{ provider2_network_type }}"
    provider_physical_network: "{{ provider2_physical_network }}"
    provider_segmentation_id: "{{ provider2_segmentation_id }}"
  register: network_id2

- name: Create second subnet
  vars:
    ansible_python_interpreter: "/root/.venv/bin/python"
  os_subnet:
    cloud: openstack
    name: external_subnet2
    allocation_pool_start: "{{ allocation_pool_start2 }}"
    allocation_pool_end: "{{ allocation_pool_end2 }}"
    cidr: "{{ cidr2 }}"
    dns_nameservers: "{{ dns_nameservers }}"
    enable_dhcp: True
    network_name: external2
    state: present

- name: Create flavor
  vars:
    ansible_python_interpreter: "/root/.venv/bin/python"
  os_nova_flavor:
    cloud: openstack
    state: present
    name: m1.medium_testpmd_4cpu
    ram: 4096
    vcpus: 4
    disk: 20
  register: flavor_id

- name: Set flavor's keys
  shell: "source {{ keystone }}; openstack flavor set --property hw:mem_page_size=1GB --property hw:numa_mempolicy=preferred --property hw:numa_mem.0=4096 --property hw:numa_nodes=1 --property hw:numa_cpus.0=0,1,2,3 --property hw:cpu_policy=dedicated m1.medium_testpmd_4cpu"

- name: Check if RHEL image exists
  stat:
    path: /root/rheltestpmd.qcow2
  register: image

- name: Download image
  get_url:
      url: "{{ osp_image }}"
      dest: "/root/"
      timeout: 30
  register: result
  until: result.msg.find("Request failed") == -1
  retries: 5
  delay: 5
  when: image.stat.exists == False

- name: Create the image
  vars:
    ansible_python_interpreter: "/root/.venv/bin/python"
  os_image:
    cloud: openstack
    state: present
    name: rhel
    container_format: bare
    disk_format: qcow2
    filename: /root/rheltestpmd.qcow2
  register: image_id

- name: Boot the VM
  vars:
    ansible_python_interpreter: "/root/.venv/bin/python"
  os_server:
    cloud: openstack
    state: present
    name: vm1
    image: "{{ image_id.id }}"
    timeout: 200
    flavor: "{{ flavor_id.id }}"
    nics:
      - net-id: "{{ network_id.id }}"
      - net-id: "{{ network_id2.id }}"
    meta:
      hostname: vm1

