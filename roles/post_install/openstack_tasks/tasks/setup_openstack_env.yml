---
- name: Gather facts
  setup:

# Delete the venv in order to avoid packages conflicts
- name: Delete existing venv if exists
  file:
    path: "{{ venv_path }}"
    state: absent
  become: true

- name: Install required packages
  vars:
    os_version: "{%- if ansible_distribution_major_version == '8' -%}
                 rhel8
                 {%- elif ansible_distribution_major_version == '7' -%}
                 rhel7
                 {%- endif -%}"
    pkg_ver_list: "{{ packages[os_version] }}"
  package:
    name: "{{ item }}"
    state: present
  loop: "{{ pkg_ver_list | flatten(levels=1) }}"
  become: true

- name: Install virtualenv module
  vars:
    ansible_python_interpreter: /usr/libexec/platform-python
  command: "{{  ansible_python_interpreter }} -m pip install virtualenv"
  become: true
- name: Create virtualenv
  vars:
    ansible_python_interpreter: /usr/libexec/platform-python
  command: "{{ ansible_python_interpreter }} -m virtualenv {{ venv_path }}"

- name: Update virtualenv packages
  vars:
    venv: "{%- if hostvars[groups['undercloud'][0]].ansible_facts['python']['version']['major'] == 2 -%}
           virtualenv==16.7.9
           {%- elif hostvars[groups['undercloud'][0]].ansible_facts['python']['version']['major'] == 3 -%}
           virtualenv
           {%- endif -%}"
  pip:
    name: "{{ venv }}"
    virtualenv: "{{ venv_path }}"

# The update process of pip and setuptools packages should be in a separated task.
# Otherwise, the order of the install may be flipped over and required
# packages will be installed before updating the pip and setuptools and as a result, fail.
- name: Update pip and setuptools packages
  vars:
    ansible_python_interpreter: /usr/libexec/platform-python
  pip:
    name:
      - pip>=10.0.1
      - setuptools>=39.0.0
    virtualenv: "{{ venv_path }}"

- name: Install virtualenv packages
  pip:
    name:
      - openstacksdk>=0.39,<0.40.0 ; python_version < '3'
      - openstacksdk<=0.52 ; python_version >= '3'
    virtualenv: "{{ venv_path }}"

- name: Generate clouds.yaml file
  import_tasks: clouds.yml
