---
# Creation and deletion of the network resources in OpenStack environment should be performed in order.
# Create: Networks -> Subnet -> Router -> Set default gateway for router -> Set router internal interfaces
# Delete: Detach router internal interfaces -> Delete router -> Delete networks
# On deletion, the tasks should be reversed.
# As a result, created two section of resource creation and deletion triggered by condition.

- name: Create networks and routers
  block:
    - name: Create networks
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"
      openstack.cloud.network:
        cloud: "{{ item.cloud_name | default(cloud_name) }}"
        name: "{{ item.name }}"
        provider_network_type: "{{ item.network_type | default(omit) }}"
        provider_physical_network: "{{ item.physical_network | default(omit) }}"
        provider_segmentation_id: "{{ item.segmentation_id | default(omit) }}"
        port_security_enabled: "{{ item.port_security | default(omit) }}"
        external: "{{ item.external | default('false') }}"
        shared: "{{ item.shared | default(omit) }}"
        validate_certs: "{{ validate_certs | default (omit) }}"
        state: present
      loop: "{{ networks }}"

    - name: Create subnets
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"
      openstack.cloud.subnet:
        cloud: "{{ item.cloud_name | default(cloud_name) }}"
        name: "{{ item.name }}_subnet"
        allocation_pool_start: "{{ item.allocation_pool_start | default(omit) }}"
        allocation_pool_end: "{{ item.allocation_pool_end | default(omit) }}"
        cidr: "{{ item.cidr }}"
        dns_nameservers: "{{ dns_nameservers }}"
        enable_dhcp: "{{ item.enable_dhcp | default('true') }}"
        network_name: "{{ item.name }}"
        gateway_ip: "{{ item.gateway_ip | default(omit) }}"
        no_gateway_ip: "{{ item.no_gateway_ip  | default(omit) }}"
        ip_version: "{{ item.ip_version | default('4') }}"
        validate_certs: "{{ validate_certs | default (omit) }}"
        state: present
      loop: "{{ networks }}"

    - name: Create router and set router gateway
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"
      openstack.cloud.router:
        cloud: "{{ item.cloud_name | default(cloud_name) }}"
        name: "{{ item.router_name }}"
        network: "{{ item.name }}"
        validate_certs: "{{ validate_certs | default (omit) }}"
        state: present
      when:
        - item.external is defined
        - item.external
        - item.router_name is defined
      loop: "{{ networks }}"

    # Note - In order to attach multiple interfaces to the router, a list of
    # interfaces should be provided.
    # The next set_fact definitions build a list on interfaces and routers
    # for the interation to create and attach the required subnets.
    - name: Set routers names
      set_fact:
        routers_names: "{{ networks
          | selectattr('router_name', 'defined')
          | map(attribute='router_name')
          | list
          | unique }}"

    - name: Set subnets for routers interfaces
      set_fact:
        subnets_for_routers_interfaces: "{{ subnets_for_routers_interfaces
          | default([]) }}
          + [ {{ networks
          | selectattr('router_name', 'defined')
          | selectattr('external', 'defined')
          | selectattr('external', 'equalto', False)
          | selectattr('router_name', 'match', item)
          | map(attribute='name')
          | map('regex_replace', '^(.*)$', '\\1_subnet')
          | list }} ]"
      loop: "{{ routers_names | flatten(levels=1) }}"

    - name: Set routers list
      set_fact:
        routers_lists: "{{ routers_lists | default([]) + [[ item ]] }}"
      loop: "{{ routers_names | flatten(levels=1) }}"

    - name: Create router if required and set router interfaces
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"
      openstack.cloud.router:
        cloud: "{{ cloud_name }}"
        name: "{{ item.0.0 }}"
        interfaces: "{{ item.1 }}"
        state: present
        validate_certs: "{{ validate_certs | default (omit) }}"
      loop: "{{ routers_lists | zip(subnets_for_routers_interfaces) | list }}"
      when: routers_lists is defined

    - name: Create network ports
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"
      openstack.cloud.port:
        cloud: "{{ item.0.cloud_name | default(cloud_name) }}"
        name: "{{ item.1.name }}"
        network: "{{ item.1.network }}"
        vnic_type: "{{ item.1.type }}"
        binding_profile: "{{ item.1.binding_profile | default(omit) }}"
        security_groups: "{{ item.1.sec_groups | default(omit) }}"
        port_security_enabled: "{{ item.1.port_security | default(omit) }}"
        validate_certs: "{{ validate_certs | default (omit) }}"
        tags: "{{ item[1].tags | default(omit) }}"
        state: present
      loop: "{{ instances | subelements('net_ports', 'skip_missing=True') }}"
      when: net_port

  when: resource_state == 'present'

- name: Delete networks and routers
  block:
    - name: Delete network ports
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"
      openstack.cloud.port:
        cloud: "{{ item.0.cloud_name | default(cloud_name) }}"
        name: "{{ item.1.name }}"
        network: "{{ item.1.network }}"
        vnic_type: "{{ item.1.type }}"
        validate_certs: "{{ validate_certs | default (omit) }}"
        state: absent
      loop: "{{ instances | subelements('net_ports', 'skip_missing=True') }}"
      when: net_port

    # The os_router module unable to detach the interface from the router
    - name: Detach router interfaces
      command: >
        openstack --os-cloud "{{ item.cloud_name | default(cloud_name) }}"
        router remove subnet "{{ item.router_name }}" "{{ item.name }}_subnet"
      when: "item.external is defined and not item.external"
      loop: "{{ networks }}"
      register: detach_interfaces
      failed_when:
        - detach_interfaces.rc == 1
        - detach_interfaces.stderr.find('No Subnet found') == -1

    - name: Delete router
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"
      openstack.cloud.router:
        cloud: "{{ item.cloud_name | default(cloud_name) }}"
        name: "{{ item.router_name }}"
        validate_certs: "{{ validate_certs | default (omit) }}"
        state: absent
      loop: "{{ networks }}"
      when:
        - item.external is defined
        - item.router_name is defined

    - name: Delete networks
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"
      openstack.cloud.network:
        cloud: "{{ item.cloud_name | default(cloud_name) }}"
        name: "{{ item.name }}"
        validate_certs: "{{ validate_certs | default (omit) }}"
        state: absent
      loop: "{{ networks }}"
      register: delete_networks
      failed_when:
        - delete_networks.msg is defined
        - delete_networks.msg.find('rule:delete_network is disallowed by policy') == -1
  when: resource_state == 'absent'
