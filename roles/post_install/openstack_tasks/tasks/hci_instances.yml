---

- name: "Instances {{ resource_state }}"
  vars:
    ansible_python_interpreter: "{{ venv_path }}/bin/python"
  os_server:
    state: "{{ resource_state }}"
    cloud: "{{ hci_instance.cloud_name | default(cloud_name) }}"
    name: "{{ hci_instance.name + "-" + item }}"
    image: "{{ hci_instance.image | default(images[0].name) }}"
    flavor: "{{ hci_instance.flavor | default(flavors[0].name) }}"
    key_name: "{{ hci_instance.key_name | default(omit) }}"
    security_groups: "{{ hci_instance.sec_groups | default(omit) }}"
    userdata: "{% if hci_instance.userdata is defined %}{{ hci_instance.userdata }}{% else %}{{ global_userdata | default(omit) }}{% endif %}"
    config_drive: "{{ hci_instance.config_drive | default(True) }}"
    nics: "{{ hci_instance.nics }}"
    auto_ip: 'no'
    delete_fip: 'yes'
  #loop: "{{ hci_instances | flatten(levels=1) }}"
  with_sequence: start=0 end={{ guest_limit | int }}
  register: reg_instance

- name: Add floating IP to an instance
  vars:
    ansible_python_interpreter: "{{ venv_path }}/bin/python"
  os_floating_ip:
    state: "{{ resource_state }}"
    cloud: "{{ hci_instance.cloud_name | default(cloud_name) }}"
    server: "{{ hci_instance.name }}"
    network: "{{ hci_instance.floating_ip.ext_net }}"
    nat_destination: "{{ hci_instance.floating_ip.int_net }}"
    reuse: 'yes'
    wait: 'yes'
  #loop: "{{ hci_instances | flatten(levels=1) }}"
  with_sequence: start=0 end={{ guest_limit | int }}
  when:
    - item.floating_ip is defined
    - resource_state == 'present'

# The following workaround created because the os_floating_ip module is
# incosistent when an instance contains multiple NICs.
# As a result, the floating ip can't be fetched.
# TODO(maximb): Fix the behavior of the multiple floating ips fetch.
- name: Locate floating ip of the instance
  shell: >
    openstack --os-cloud "{{ hci_instance.cloud_name | default(cloud_name) }}"
    server show "{{ hci_instance.name + "-" + item}}" -c addresses -f value
  #loop: "{{ hci_instances | flatten(levels=1) }}"
  with_sequence: start=0 end={{ guest_limit | int }}
  register: reg_floating_ip
  when:
    - item.floating_ip is defined
    - resource_state == 'present'

- name: Parse floating ip output
  set_fact:
    floating_ip_var: "{{ floating_ip_var | default([]) }}
      + [ '{{ hci_instance.stdout
      | regex_search('\\s\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b')
      | replace(' ', '') }}' ]"
  loop: "{{ reg_floating_ip.results }}"
  with_sequence: start=0 end={{ guest_limit | int }}
  when:
    - resource_state == 'present'
    - reg_floating_ip.changed

- name: Add instances to dynamic inventory
  add_host:
    name: "{{ item.1.name }}"
    group: "{{ item.1.groups | default(omit) }}"
    ansible_host: "{% if item.1.floating_ip is defined %}{{ item.0 }}{% else%}{{ item.0.openstack.private_v4 }}{% endif %}"
    ansible_user: "{{ item.1.connection_user | default(connection_user) }}"
    ansible_ssh_port: 22
    ansible_ssh_private_key_file: "/tmp/{{ item.1.key_name }}.key"
  loop: "{% if reg_floating_ip.changed %}{{ floating_ip_var | zip(instances) | list }}{% else %}{{ reg_instance.results | zip(instances) | list }}{% endif %}"
  when:
    - resource_state == 'present'
    - resource_generate_inventory

- name: create 10g volume
  os_volume:
    state: present
    cloud: mordred
    availability_zone: az2
    size: 10
    display_name: {{ "volume-"+item}}
    scheduler_hints:
      same_host: {{ comput_dut }}
  with_sequence: start=0 end={{ guest_limit | int }}


# Attaches a volume to a compute host
- name: attach volume to instance
  os_server_volume:
    state: present
    cloud: mordred
    server: {{ "hci_instance-"+item }}
    volume: {{ "volume-"+item}}
    device: /dev/vdb
  with_sequence: start=0 end={{ guest_limit | int }}
