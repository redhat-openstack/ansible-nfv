---

- name: "Instances {{ resource_state }}"
  vars:
    ansible_python_interpreter: "{{ venv_path }}/bin/python"
    all_instances: '{{ instances | default([]) }} + {{ generated_dynamic_instances | default([]) }}'
  openstack.cloud.server:
    state: "{{ resource_state }}"
    cloud: "{{ item.cloud_name | default(cloud_name) }}"
    name: "{{ item.name }}"
    image: "{{ item.image | default(images[0].name) }}"
    availability_zone: "{{ item.availability_zone | default(omit) }}"
    flavor: "{{ item.flavor | default(flavors[0].name) }}"
    volumes: "{{ item['volumes'] | default(omit) }}"
    key_name: "{{ item.key_name | default(omit) }}"
    security_groups: "{{ item.sec_groups | default(omit) }}"
    userdata: "{% if item.userdata is defined %}{{ item.userdata }}{% else %}{{ global_userdata | default(omit) }}{% endif %}"
    config_drive: "{{ item.config_drive | default(True) }}"
    nics: "{{ item.nics }}"
    auto_ip: 'no'
    delete_fip: 'yes'
    validate_certs: "{{ validate_certs | default(omit) }}"
    timeout: 600
  loop: "{{ all_instances | flatten(levels=1) }}"
  register: reg_instance

- name: Check floating ips
  set_fact:
    floating_ip_set: true
  when:
    - "'openstack' in item"
    - "item['openstack']['addresses'][item['item']['floating_ip']['int_net']]|selectattr('OS-EXT-IPS:type','equalto','floating')|list"
  loop: "{{ reg_instance.results }}"

- name: Add floating IP to an instance
  vars:
    ansible_python_interpreter: "{{ venv_path }}/bin/python"
    all_instances: '{{ instances | default([]) }} + {{ generated_dynamic_instances | default([]) }}'
  openstack.cloud.floating_ip:
    state: "{{ resource_state }}"
    cloud: "{{ item.cloud_name | default(cloud_name) }}"
    server: "{{ item.name }}"
    network: "{{ item.floating_ip.ext_net }}"
    nat_destination: "{{ item.floating_ip.int_net }}"
    reuse: 'yes'
    wait: 'yes'
    validate_certs: "{{ validate_certs | default(omit) }}"
  loop: "{{ all_instances | flatten(levels=1) }}"
  when:
    - item.floating_ip is defined
    - resource_state == 'present'
    - floating_ip_set is undefined

# The following workaround created because the os_floating_ip module is
# incosistent when an instance contains multiple NICs.
# As a result, the floating ip can't be fetched.
# TODO(maximb): Fix the behavior of the multiple floating ips fetch.
- name: Locate floating ip of the instance
  vars:
    all_instances: '{{ instances | default([]) }} + {{ generated_dynamic_instances | default([]) }}'
  command: >
    openstack --os-cloud "{{ item.cloud_name | default(cloud_name) }}"
    server show "{{ item.name }}" -c addresses -f value
  loop: "{{ all_instances | flatten(levels=1) }}"
  register: reg_floating_ip
  when:
    - item.floating_ip is defined
    - resource_state == 'present'

- name: Parse floating ip output
  set_fact:
    floating_ip_var: "{{ floating_ip_var | default([]) }}
      + [ '{{ item.stdout
      | regex_search('\\s\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b')
      | replace(' ', '') }}' ]"
  loop: "{{ reg_floating_ip.results }}"
  when:
    - resource_state == 'present'
    - reg_floating_ip.changed

- name: Add instances to dynamic inventory
  vars:
    all_instances: '{{ instances | default([]) }} + {{ generated_dynamic_instances | default([]) }}'
  add_host:
    name: "{{ item.1.name }}"
    group: "{{ item.1.groups | default(omit) }}"
    ansible_host: "{% if item.1.floating_ip is defined %}{{ item.0 }}{% else%}{{ item.0.openstack.private_v4 }}{% endif %}"
    ansible_user: "{{ item.1.connection_user | default(connection_user) }}"
    ansible_ssh_port: 22
    ansible_ssh_private_key_file: "{{ private_key_fetch_location }}/{{ item.1.key_name }}.key"
  loop: "{% if reg_floating_ip.changed %}{{ floating_ip_var | zip(all_instances) | list }}{% else %}{{ reg_instance.results | zip(all_instances) | list }}{% endif %}"
  when:
    - resource_state == 'present'
    - resource_generate_inventory
