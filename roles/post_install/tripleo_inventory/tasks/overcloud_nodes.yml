---
- block:
    # Delete the venv in order to avoid packages conflicts
    - name: Delete existing venv if exists
      vars:
        ansible_python_interpreter: /usr/libexec/platform-python
      file:
        path: "{{ venv_path }}"
        state: absent

    - name: Install requirements for pip virtualenv
      vars:
        ansible_python_interpreter: /usr/libexec/platform-python
        os_version: "{%- if hostvars[groups['undercloud'][0]].ansible_distribution_major_version == '8' -%}
                     rhel8
                     {%- elif hostvars[groups['undercloud'][0]].ansible_distribution_major_version == '7' -%}
                     rhel7
                     {%- endif -%}"
        pkg_ver_list: "{{ packages[os_version] }}"
      package:
        name: "{{ item }}"
        state: present
      loop: "{{ pkg_ver_list | flatten(levels=1) }}"
  become: true

- name: download pip from pypi
  vars:
    pip_pypi: "{%- if hostvars[groups['undercloud'][0]]['ansible_python']['version']['major'] == 2 -%}
                  https://bootstrap.pypa.io/2.7/get-pip.py
               {%- else -%}
                  https://bootstrap.pypa.io/get-pip.py
               {%- endif -%}"
  get_url:
    dest: "/tmp/get-pip.py"
    url: "{{ pip_pypi }}"
    timeout: 100

- name: Install pip
  vars:
    ansible_python_interpreter: /usr/libexec/platform-python
  command: "{{ ansible_python_interpreter }} /tmp/get-pip.py"

- name: Install virtualenv module
  vars:
    packages: "{%- if hostvars[groups['undercloud'][0]]['ansible_python']['version']['major'] == 2 -%}
                 virtualenv==16.7.9
               {%- else -%}
                 setuptools, virtualenv
               {%- endif -%}"
  pip:
    name: "{{ packages }}"

- name: Install create virtualenv and openstacksdk packages
  vars:
    ansible_python_interpreter: /usr/libexec/platform-python
  pip:
    name:
      - openstacksdk>=0.39,<0.40.0 ; python_version < '3'
      - openstacksdk>=0.39 ; python_version >= '3'
    virtualenv: "{{ venv_path }}"

- name: Fetch private key from the undercloud host
  vars:
    ansible_python_interpreter: /usr/libexec/platform-python
  fetch:
    src: "/home/stack/.ssh/id_rsa"
    dest: "{{ overcloud_private_key }}"
    flat: yes

- name: Set SSH key permissions
  file:
    path: "{{ overcloud_private_key }}"
    mode: 0600
  delegate_to: localhost

- name: Grab auth data from stackrc file and publish it as YAML
  ### ToDo(MaximB): Convert the task to more generic execution.
  ###               Implement reuse.
  vars:
    ansible_python_interpreter: /usr/libexec/platform-python
  shell: |
      source "{{ rc_file_path | default('/home/stack/stackrc') }}"
      echo "
      auth_url: $OS_AUTH_URL
      username: $OS_USERNAME
      password: $OS_PASSWORD
      project_name: ${OS_PROJECT_NAME:-$OS_TENANT_NAME}
      user_domain_name: ${OS_USER_DOMAIN_NAME:-''}
      project_domain_name: ${OS_PROJECT_DOMAIN_NAME:-''}
      "
  register: creds

- name: Gather Overcloud nodes data
  vars:
    ansible_python_interpreter: "{{ venv_path }}/bin/python"
  os_server_facts:
    auth: "{{ creds.stdout | from_yaml }}"
    # Required for SSL
    validate_certs: no
