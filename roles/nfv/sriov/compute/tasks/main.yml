---

- name: Check if SRIOV is enabled
  stat:
    path: "/sys/class/net/{{ interface }}/device/sriov_totalvfs"
  register: sriov_status

- name: Fail the play if SRIOV feature is disabled
  fail:
    msg: "SRIOV feature is disabled on {{ interface }} interface. Please, enable the feature in BIOS and rerun the playbook"
  when: sriov_status.stat.exists == false

- name: Add parameter to the grub
  lineinfile:
    dest: /etc/default/grub
    backrefs: yes
    state: present
    regexp: '^GRUB_CMDLINE_LINUX="(?!.* intel_iommu=on)(.*)"'
    line: 'GRUB_CMDLINE_LINUX="\1 intel_iommu=on"'
  register: grub

- name: Perform - make grub
  command: "grub2-mkconfig -o /boot/grub2/grub.cfg"
  when: grub.changed
  register: makegrub

- name: Check the amount of Virtual Functions available
  shell: /usr/bin/cat "/sys/class/net/{{ interface }}/device/sriov_totalvfs"
  register: total_vfs
  changed_when: False
  always_run: yes

- name: Check the existence of dirver config file
  stat:
    path: "/etc/modprobe.d/{{ hostvars[inventory_hostname]['ansible_{0}'.format(interface)].module }}.conf"
  register: driver_module

- name: Check the existence of dist.conf file
  stat:
    path: /etc/modprobe.d/dist.conf
  register: dist

- name: Create a new configuration file
  file:
    path: "/etc/modprobe.d/{{ item }}"
    state: touch
  with_items:
    - "{{ hostvars[inventory_hostname]['ansible_{0}'.format(interface)].module }}.conf"
    - dist.conf
  when: driver_module.stat.exists == false or dist.stat.exists == false

- name: Set configuration files
  lineinfile:
    dest: "{{ item.file }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.context }}"
  with_items:
    - { file: '/etc/modprobe.d/dist.conf', regexp: '^options vfio_iommu_type1', context: 'options vfio_iommu_type1 allow_unsafe_interrupts=1' }
    - { file: '/etc/modprobe.d/{{ hostvars[inventory_hostname]["ansible_{0}".format(interface)].module }}.conf', regexp: '^options {{ hostvars[inventory_hostname]["ansible_{0}".format(interface)].module }} max_vfs={{ virtual_function_number | default(total_vfs.stdout) }}', context: 'options {{ hostvars[inventory_hostname]["ansible_{0}".format(interface)].module }} max_vfs={{ virtual_function_number | default(total_vfs.stdout) }}' }
  register: conffiles

- name: Create a systemd service for virtual function boot
  template:
    src: virtual-function.service.j2
    dest: /etc/systemd/system/virtual-function.service
    owner: root
    group: root
    mode: 0644
  notify:
    - 'Reload the systemctl daemon'
    - 'Start virtual-function service'

- meta: flush_handlers

- name: Check the interface PCI bus ID
  shell: lspci -nn | grep -e "Ethernet.*Virtual" | grep -oE "\[([a-z0-9A-Z]{1,6}):([a-z0-9A-Z]{1,6})\]" | uniq | egrep -o '[^][]+'
  register: bus_id
  changed_when: False
  always_run: yes

- name: Writing fact into a file
  copy:
    content: "{{ bus_id.stdout }}"
    dest: /tmp/bus_id
  delegate_to: localhost
  become: false

- name: Configure nova conf file
  ini_file:
    dest: "{{ item.file }}"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{item.value}}"
  with_items:
    - { file: '/etc/nova/nova.conf', section: 'DEFAULT', option: 'pci_passthrough_whitelist',value: '"{"devname": "{{ interface }}", "physical_network":"{{ physical_network }}"}"' }
  notify: 'Restart nova compute service'

- block:
    - name: Install the latest version of openstack-neutron-sriov-nic-agent
      yum:
        name: openstack-neutron-sriov-nic-agent
        state: latest

    - name:  Configure SR-IOV agent
      ini_file:
        dest: "{{ item.file }}"
        section: "{{ item.section }}"
        option: "{{ item.option }}"
        value: "{{item.value}}"
      with_items:
        - { file: '/etc/neutron/plugins/ml2/sriov_agent.ini', section: 'sriov_nic', option: 'physical_device_mappings',value: "{{ physical_network }}:{{ interface }}" }
        - { file: '/etc/neutron/plugins/ml2/openvswitch_agent.ini', section: 'securitygroup', option: 'firewall_driver',value: 'neutron.agent.firewall.NoopFirewallDriver' }
      register: sriov_agent

    - name: Start and enable neutron-sriov-nic-agent
      service:
        name: neutron-sriov-nic-agent
        state: started
        enabled: True
  when: 'sriov_agent_install|bool == true'

- name: Restart the server
  shell: sleep 2 && shutdown -r now "Ansible updates triggered"
  async: 1
  poll: 0
  ignore_errors: true
  when: conffiles.changed or makegrub.changed or sriov_agent.changed

- name: Wait for server to restart successfully
  wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    search_regex: "OpenSSH"
    port: 22
    timeout: 300
    connect_timeout: 50
    delay: 5
  delegate_to: localhost
  become: false
