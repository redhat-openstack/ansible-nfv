---
- name: Junos configuration block
  block:
    - name: Set login banner
      junos_banner:
        banner: motd
        text: "{{ switch_banner }}"
        state: present

    - name: Set VLANs From VLANs List
      junos_vlan:
        name: "vlan{{ item }}"
        vlan_id: "{{ item }}"
        state: present
      loop: "{{ vlan_list }}"
      when: vlan_list is defined

    - name: Set VLANs From VLANs Map
      junos_vlan:
        name: "{{ item['name'] }}"
        vlan_id: "{{ item['vlan_id'] }}"
        state: present
      loop: "{{ vlan_map }}"
      when: vlan_map is defined

    - name: Configure interfaces - description, mode (access/trunk), vlans
      vars:
        iface_vlans: "{%- set iface_vlans = [] -%}
                      {%- set helper_var = [] -%}
                      {%- if item.iface_mode == 'trunk'-%}
                      {%- if ',' in item.vlan -%}
                      {%- for vlan in item.vlan.replace(' ', '').split(',') -%} {{ helper_var.append(vlan) }} {%- endfor -%}
                      {%- else -%}
                      {{ helper_var.append(item.vlan) }}
                      {%- endif -%}
                      {%- for vlan in helper_var -%}
                      {%- if (vlan | regex_search('^\\d+-\\d+$')) -%}
                      {%- for v in range(vlan.split('-')[0] | int, vlan.split('-')[1] | int + 1) -%}
                      {{ iface_vlans.append(v) }}
                      {%- endfor -%}
                      {%- else -%}
                      {{ iface_vlans.append(vlan) }}
                      {%- endif -%}
                      {%- endfor -%}
                      {%- endif -%}
                      {{ iface_vlans | unique }}"
        vlans_string: "{%- if iface_vlans -%}
                       {% for item in iface_vlans %}
                       {%- if (item | regex_search('^\\d+$')) -%}
                       {{ item |regex_replace('^(.*)$', 'vlan\\1 ') }}
                       {%- else -%}
                       {{ item |regex_replace('^(.*)$', '\\1 ') }}
                       {%- endif -%}
                       {% endfor %}
                       {%- elif item.vlan == 'all' -%}
                       {{ item.vlan |regex_replace('^(.*)$', 'all ') }}
                       {%- else -%}
                       {%- if (item.vlan | regex_search('^\\d+$')) -%}
                       {{ item.vlan |regex_replace('^(.*)$', 'vlan\\1 ') }}
                       {%- else -%}
                       {{ item |regex_replace('^(.*)$', '\\1 ') }}
                       {%- endif -%}
                       {% endif %}"
        trunk_vlans_list: "{%- if vlans_string[0] is defined -%}
                           {{ vlans_string.split() }}{% else %}{{ item.vlan }}{% endif %}"
        access_vlan: "{%- if item.iface_mode == 'access' -%}
                      {%- if (item.vlan | regex_search('^\\d+$')) -%}
                      {{ item.vlan |regex_replace('^(.*)$', 'vlan\\1') }}
                      {%- else -%}
                      {{ item.vlan }}
                      {%- endif -%}
                      {%- endif -%}"
      junos_l2_interface:
        name: "{{ item.iface }}"
        description: "{{ item.description }}"
        mode: "{{ item.iface_mode }}"
        access_vlan: "{%- if item.iface_mode == 'access' -%}
                      {{ access_vlan }}{% else %}{{ omit }}{% endif %}"
        trunk_vlans: "{%- if item.iface_mode == 'trunk' -%}
                      {{ trunk_vlans_list }}{% else %}{{ omit }}{% endif %}"
        unit: 0
        state: present
      loop: "{{ switch_vars.interfaces }}"

    - name: Set MTU value on the interface
      junos_interface:
        name: "{{ item.iface }}"
        mtu: "{{ item.mtu }}"
        state: present
      loop: "{{ switch_vars.interfaces }}"
      when: item.mtu is defined

    # LACP aggregation can't override existing configuration
    # that is not LACP related on the memeber interfaces.
    # Required to delete the config before setting the LACP dependency interface.
    - name: Reset LACP member interface
      junos_interface:
        name: "{{ item.1 }}"
        state: absent
      loop: "{{ switch_vars.interfaces | subelements('aggr_members', 'skip_missing=True') }}"
      when: item.0.aggr_members is defined

    - name: Set aggregation for the interface
      junos_linkagg:
        name: "{{ item.iface }}"
        description: "{{ item.description }}"
        members: "{{ item.aggr_members }}"
        mode: active
      loop: "{{ switch_vars.interfaces }}"
      when: item.aggr_members is defined

    - name: Configure IGMP snooping
      vars:
        vlan_name: "{%- if (item.vlan | regex_search('^\\d+$')) -%}
                    {{ item.vlan |regex_replace('^(.*)$', 'vlan\\1') }}
                    {%- else -%}
                    {{ item.vlan }}"
      block:
        - name: Reset IGMP snooping for each defined vlan
          junos_config:
            lines:
              - delete protocols igmp-snooping vlan {{ vlan_name }}
          loop: "{{ switch_vars.igmp_snooping }}"
          when:
            - vlan_name is defined

        - name: Create IGMP querier for each defined vlan
          junos_config:
            lines:
              - "set protocols igmp-snooping vlan {{ vlan_name }}
                 l2-querier source-address {{ item.ip_address }}"
          loop: "{{ switch_vars.igmp_snooping }}"
          when:
            - vlan_name is defined
            - item.ip_address is defined

        - name: Configure interfaces in which IGMP queries are broadcasted
          junos_config:
            lines:
              - "set protocols igmp-snooping vlan {{ vlan_name }}
                 interface {{ item.1 }}"
          loop: "{{ switch_vars.igmp_snooping | default([]) |
                 subelements('interfaces', 'skip_missing=True') }}"
          when: item.0.vlan is defined and item.0.interfaces is defined
      when: switch_vars.igmp_snooping is defined

    - name: Save configuration
      junos_config:
        confirm_commit: yes

  rescue:
    - name: Configuration rollback
      junos_config:
        rollback: 1
